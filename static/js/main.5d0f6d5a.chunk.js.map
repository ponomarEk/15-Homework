{"version":3,"sources":["components/Post/user.js","components/Post/content.js","components/Post/avatar.js","components/Post/events.js","components/Post/date.js","components/Post/container.js","components/Post/index.js","App.js","serviceWorker.js","index.js"],"names":["userInfo","User","className","id","src","contentInfo","Content","Avatar","Events","Date","Container","Post","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uUAKMA,G,gBAEY,oBAFZA,EAGgB,cAHhBA,EADgB,iFA8BPC,MAtBf,WACI,OACI,yBAAKC,UAAY,QAET,wBAAIA,UAAY,kBACZ,4BACI,0BAAMC,GAAK,QACNH,GAEL,yBAAKI,IAAOJ,EAAeG,GAAK,YAEpC,4BACI,8BACKH,OCnBvBK,G,MAEW,mDAFXA,EAHY,gGAoBHC,MAXf,WACI,OACI,yBAAKJ,UAAU,WACX,uBAAGA,UAAU,eACRG,GAEL,yBAAKD,IAAOC,EAAmBF,GAAG,qB,MCP/BI,MALf,WACI,OACI,yBAAKH,IAJQ,6FAIaD,GAAK,Y,MCsBtBK,MAtBjB,WACI,OACI,yBAAKN,UAAU,UACb,yBAAKA,UAAU,SACX,uBAAGA,UAAU,kCACb,8BATC,MAWH,yBAAKA,UAAU,SACX,uBAAGA,UAAU,8BACb,8BAZH,MAcD,yBAAKA,UAAU,SACX,uBAAGA,UAAU,4BACb,8BAfJ,MAiBA,yBAAKA,UAAU,SACX,uBAAGA,UAAU,gC,MCVdO,MARf,WACI,OACI,8BAJK,e,MCuBEC,MAhBf,WACI,OACI,yBAAKR,UAAW,aACZ,kBAAC,EAAD,MACA,yBAAKA,UAAU,KACX,yBAAKA,UAAY,KACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEJ,kBAAC,EAAD,MACA,kBAAC,EAAD,SCTDS,MARf,WACI,OACI,6BACI,kBAAC,EAAD,QCQGC,MATf,WACE,OACE,yBAAKV,UAAU,OAEb,kBAAC,EAAD,QCEcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5d0f6d5a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport \"./user.css\"\r\n\r\nconst VERIFIED_ICON = \"https://upload.wikimedia.org/wikipedia/commons/e/e4/Twitter_Verified_Badge.svg\";\r\nconst userInfo = \r\n{\r\n            name: \"Anakin Skywalker\",\r\n            nickname: \"@dart_vader\",\r\n            icon: VERIFIED_ICON\r\n}\r\n\r\nfunction User(){\r\n    return(\r\n        <div className = \"info\"> \r\n            \r\n                <ul className = \"user__elements\">\r\n                    <li>\r\n                        <span id = \"name\">\r\n                            {userInfo.name}\r\n                        </span>\r\n                        <img src = {userInfo.icon} id = \"verify\" />\r\n                    </li>\r\n                    <li>\r\n                        <span>\r\n                            {userInfo.nickname}\r\n                        </span>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default User;","import React from 'react';\r\n\r\nimport \"./content.css\";\r\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\r\n\r\n\r\nconst contentInfo = \r\n{\r\n         content:\"WTF? Who is Ray? Why she is Skywalker? Luke...?\",\r\n         image:RAY_IMAGE\r\n}\r\n\r\nfunction Content(){\r\n    return(\r\n        <div className=\"content\">\r\n            <p className=\"inner__text\">\r\n                {contentInfo.content}\r\n            </p>\r\n            <img src = {contentInfo.image} id=\"content__photo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Content;","import React from 'react';\r\n\r\nimport \"./avatar.css\"\r\n\r\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\r\n\r\nfunction Avatar(){\r\n    return(\r\n        <img src = {ANAKIN_IMAGE} id = \"author\"/>\r\n    )\r\n}\r\nexport default Avatar;","import React from 'react';\r\n\r\nimport './events.css';\r\n\r\nlet comments = 482;\r\nlet shares = 146;\r\nlet likes = 887;\r\n\r\nfunction Events(){\r\n    return (\r\n        <div className=\"events\">\r\n          <div className=\"event\">\r\n              <i className=\"far fa-comment-alt icon fa-lg\"></i>\r\n              <span>{comments}</span>\r\n          </div>\r\n            <div className=\"event\">\r\n                <i className=\"fas fa-retweet icon fa-lg\"></i>\r\n                <span>{shares}</span>\r\n            </div>\r\n            <div className=\"event\">\r\n                <i className=\"far fa-heart icon fa-lg\"></i>\r\n                <span>{likes}</span>\r\n            </div>\r\n            <div className=\"event\">\r\n                <i className=\"fas fa-upload icon fa-lg\"></i>\r\n            </div>\r\n        </div>\r\n    )\r\n  };\r\n\r\n  export default Events;","import React from 'react';\r\n\r\nimport './date.css';\r\n\r\nconst date = '~  26 febr';\r\n\r\nfunction Date(){\r\n    return(\r\n        <span>\r\n            {date}\r\n        </span>\r\n    )\r\n}\r\n\r\nexport default Date;","import React from \"react\";\r\n\r\nimport User from './user';\r\nimport Content from './content'\r\nimport Avatar from './avatar'\r\nimport Events from './events';\r\nimport Date from './date'\r\n\r\n\r\nimport \"./container.css\";\r\n\r\nfunction Container(){\r\n    return(\r\n        <div className =\"container\">\r\n            <Avatar/>\r\n            <div className=\"f\">\r\n                <div className = \"a\">\r\n                    <User/>\r\n                    <Date/> \r\n                </div>\r\n                <Content/>\r\n                <Events/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\r\n\r\nimport Container from './container';\r\n\r\nfunction Post(){\r\n    return(\r\n        <div>\r\n            <Container/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from 'react';\n\nimport './App.css';\n\nimport Post from './components/Post';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <Post/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}